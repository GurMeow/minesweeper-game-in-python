import random
import tkinter as tk
import time

MAX_BOARD = 25

main_board = []

mode = "bomb"

y = 0
x = 0
bomb_chance = 0

def create_board():
    global y, x
    board = []
    for i in range(y):
        board.append([])
        for j in range(x):
            board[i].append('-')
    return board


def print_board():
    global main_board
    print("\n")
    for i in range(len(main_board)):
        for j in range(len(main_board[i])):
            print(main_board[i][j], end=" ")
        print()


def get_coordinates_and_chance():
    global y, x, bomb_chance
    counter = 0

    while True:

        if counter == 3:
            return "stop"

        try:
            y = int(input(f"please enter the row amount in range of 1 to {MAX_BOARD}: "))
            x = int(input(f"please enter the column amount in range of 1 to {MAX_BOARD}: "))
            bomb_chance = int(input(f"please enter the chance for a bomb to appear in range of 2 to 20: "))

            if y < 1 or y > MAX_BOARD or x < 1 or x > MAX_BOARD or bomb_chance < 2 or bomb_chance > 20:
                print("you did not enter the asked range for the coordinates or for the chance")
            else:
                return y, x, bomb_chance
        except:
            counter += 1
            print("please enter valid places and chance")


def binary_stage_board_make():
    global main_board, bomb_chance
    for i in range(len(main_board)):
        for j in range(len(main_board[i])):
            main_board[i][j] = random.randint(1, bomb_chance)
    return main_board


def bombs_check(i, j):
    global main_board
    counter = 0

    if 0 <= i - 1 < len(main_board) and 0 <= j - 1 < len(main_board[i]):
        if main_board[i - 1][j - 1] == 'X':
            counter += 1

    if 0 <= i - 1 < len(main_board) and 0 <= j < len(main_board[i]):
        if main_board[i - 1][j] == 'X':
            counter += 1

    if 0 <= i - 1 < len(main_board) and 0 <= j + 1 < len(main_board[i]):
        if main_board[i - 1][j + 1] == 'X':
            counter += 1

    if 0 <= i < len(main_board) and 0 <= j - 1 < len(main_board[i]):
        if main_board[i][j - 1] == 'X':
            counter += 1

    if 0 <= i < len(main_board) and 0 <= j < len(main_board[i]):
        if main_board[i][j] == 'X':
            counter += 1

    if 0 <= i < len(main_board) and 0 <= j + 1 < len(main_board[i]):
        if main_board[i][j + 1] == 'X':
            counter += 1

    if 0 <= i + 1 < len(main_board) and 0 <= j - 1 < len(main_board[i]):
        if main_board[i + 1][j - 1] == 'X':
            counter += 1

    if 0 <= i + 1 < len(main_board) and 0 <= j < len(main_board[i]):
        if main_board[i + 1][j] == 'X':
            counter += 1

    if 0 <= i + 1 < len(main_board) and 0 <= j + 1 < len(main_board[i]):
        if main_board[i + 1][j + 1] == 'X':
            counter += 1

    return counter


def bombs_and_num_stage_make():
    global main_board
    stop = False
    counter_of_eight = 0
    while True:
        for i in range(len(main_board)):
            for j in range(len(main_board[0])):
                if main_board[i][j] == 1:
                    main_board[i][j] = 'X'

        for i in range(len(main_board)):
            for j in range(len(main_board[0])):
                if main_board[i][j] != 'X':
                    main_board[i][j] = bombs_check(i, j)

        for i in range(y):
            for j in range(x):
                if main_board[i][j] == 8:
                    counter_of_eight += 1

        if counter_of_eight == 0:
            break

    return main_board


def all_stages():
    global main_board, bomb_chance
    main_board = binary_stage_board_make()
    main_board = bombs_and_num_stage_make()

    return main_board


def change_mode():
    global mode, mode_button
    if mode == "bomb":
        mode = "flag"
    else:
        mode = "bomb"
    mode_button.config(text=mode)


def main():
    global main_board, y, x, bomb_chance
    coordinates = get_coordinates_and_chance()

    if coordinates != "stop":
        y, x, bomb_chance = coordinates
    else:
        print("you have entered 3 times invalid coordinates, game will now end")
        return "game_over"

    main_board = create_board()

    main_board = all_stages()


def button_play(i, j):
    global buttons, main_board, did_action, game_over, y, x, zero_checker_bool
    if not game_over:
        if mode == "bomb":
            if main_board[i][j] == 'X' and not did_action:
                while True:
                    main_board = create_board()
                    main_board = all_stages()
                    if main_board[i][j] != 'X':
                        break
            elif main_board[i][j] == 'X' and did_action:
                game_over = True
                game_over_txt = tk.Label(text="failed")
                game_over_txt.grid(row=y+4, column=x//2)
                buttons[i][j].config(text="!")
            else:
                buttons[i][j].config(text=main_board[i][j])
                did_action = True
        else:
            if buttons[i][j].cget("text") == "-":
                buttons[i][j].config(text="X")
            elif buttons[i][j].cget("text") == "X":
                buttons[i][j].config(text="-")

        buttons_board = []
        for i in range(y):
            buttons_board.append([])
            for j in range(x):
                buttons_board[i].append(buttons[i][j].cget("text"))

        for i in range(y):
            for j in range(x):
                if main_board[i][j] == 'X':
                    buttons_board[i][j] = 'X'

        while True:
            counter_of_actions = 0
            for i in range(y):
                for j in range(x):
                    if buttons_board[i][j] == 0 and not zero_checker_bool[i][j]:
                        if 0 <= i - 1 < y and 0 <= j - 1 < x:
                            buttons[i - 1][j - 1].config(text=main_board[i - 1][j - 1])
                            buttons_board[i - 1][j - 1] = main_board[i - 1][j - 1]

                        if 0 <= i - 1 < y and 0 <= j < x:
                            buttons[i - 1][j].config(text=main_board[i - 1][j])
                            buttons_board[i - 1][j] = main_board[i - 1][j]

                        if 0 <= i - 1 < y and 0 <= j + 1 < x:
                            buttons[i - 1][j + 1].config(text=main_board[i - 1][j + 1])
                            buttons_board[i - 1][j + 1] = main_board[i - 1][j + 1]

                        if 0 <= i < y and 0 <= j - 1 < x:
                            buttons[i][j - 1].config(text=main_board[i][j - 1])
                            buttons_board[i][j - 1] = main_board[i][j - 1]

                        if 0 <= i < y and 0 <= j + 1 < x:
                            buttons[i][j + 1].config(text=main_board[i][j + 1])
                            buttons_board[i][j + 1] = main_board[i][j + 1]

                        if 0 <= i + 1 < y and 0 <= j - 1 < x:
                            buttons[i + 1][j - 1].config(text=main_board[i + 1][j - 1])
                            buttons_board[i + 1][j - 1] = main_board[i + 1][j - 1]

                        if 0 <= i + 1 < y and 0 <= j < x:
                            buttons[i + 1][j].config(text=main_board[i + 1][j])
                            buttons_board[i + 1][j] = main_board[i + 1][j]

                        if 0 <= i + 1 < y and 0 <= j + 1 < x:
                            buttons[i + 1][j + 1].config(text=main_board[i + 1][j + 1])
                            buttons_board[i + 1][j + 1] = main_board[i + 1][j + 1]

                        zero_checker_bool[i][j] = True
                        counter_of_actions += 1
            if counter_of_actions == 0:
                break

        if buttons_board == main_board:
            game_over = True
            game_over_txt = tk.Label(text="won")
            game_over_txt.grid(row=y + 4, column=x // 2)
            for i in range(y):
                for j in range(x):
                    if main_board[i][j] == 'X':
                        buttons[i][j].config(text="L")


def clear_board():
    global main_board, buttons, y, x, game_over

    game_over = False

    main_board = create_board()

    main_board = all_stages()

    for i in range(x):
        for j in range(x):
            buttons[i][j].config(text="-")


def show_board():
    global game_over, buttons, y, x, main_board
    game_over = True

    for i in range(y):
        for j in range(x):
            buttons[i][j].config(text=main_board[i][j])


main()

buttons = []
did_action = False
game_over = False
zero_checker_bool = []

for i in range(y):
    buttons.append([])
    zero_checker_bool.append([])
    for j in range(x):
        buttons[i].append(
            tk.Button(text="-", height=3, width=6, command=lambda i_index=i, j_index=j: button_play(i_index, j_index)))
        buttons[i][j].grid(row=i, column=j)
        zero_checker_bool[i].append(False)

mode_button = tk.Button(text="bomb", command=change_mode, height=3, width=6)
mode_button.grid(row=y + 1, column=j // 2)


clear_board_button = tk.Button(text="clr brd", command=lambda: clear_board() ,width=6, height=3)
clear_board_button.grid(row=y + 1, column=j // 2 + 1)


print_board_button = tk.Button(text="print brd", command=lambda: print_board(), width=6, height=3)
print_board_button.grid(row=y + 2, column=j // 2)


show_board_button = tk.Button(text="shw brd", command=lambda: show_board(), width=6, height=3)
show_board_button.grid(row=y + 2, column=j // 2 + 1)


tk.mainloop()
